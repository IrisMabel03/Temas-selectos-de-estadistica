<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="DB.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="985"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="alumnos" custom_title="0" dock_id="1" table="4,7:mainalumnos"/><dock_state state="000000ff00000000fd00000001000000020000044200000260fc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000000004420000012500ffffff000002690000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="alumnos" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="72"/><column index="2" value="55"/><column index="3" value="79"/><column index="4" value="36"/><column index="5" value="95"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1*">CREATE TABLE alumnos (
    expediente INT PRIMARY KEY,
    nombre TEXT,
    apellido TEXT,
    edad INT,
    campus TEXT
);

CREATE TABLE calificaciones (
    id_materia INT,
    expediente INT,
    nombre_materia TEXT,
    calificacion FLOAT,
    FOREIGN KEY (expediente) REFERENCES alumnos(expediente)
);

INSERT INTO alumnos (expediente, nombre, apellido, edad, campus) VALUES
(1, 'Juan', 'García', 25, 'Querétaro'),
(2, 'María', 'Pérez', 23, 'Guanajuato'),
(3, 'Pedro', 'Martínez', 20, 'CDMX'),
(4, 'Ana', 'López', 20, 'Monterrey'),
(5, 'Luis', 'Hernández', 20, 'Guadalajara'),
(6, 'Sofía', 'Ramírez', 19, 'Puebla'),
(7, 'Carlos', 'Torres', 25, 'Veracruz'),
(8, 'Laura', 'González', 18, 'Mérida'),
(9, 'Diego', 'Sánchez', 23, 'Tijuana'),
(10, 'Lucía', 'Morales', 25, 'Hermosillo');

INSERT INTO calificaciones (id_materia, expediente, nombre_materia, calificacion) VALUES
(8, 2, 'Biología', NULL),
(10, 10, 'Deportes', 7.49),
(1, 1, 'Historia', NULL),
(3, 4, 'Deportes', NULL),
(2, 3, 'Arte', 7.68),
(8, 1, 'Inglés', NULL),
(4, 2, 'Física', NULL),
(1, 8, 'Inglés', 7.30),
(3, 6, 'Física', 8.18),
(10, 9, 'Literatura', 8.74),
(10, 6, 'Biología', 9.16),
(5, 5, 'Deportes', NULL),
(8, 9, 'Matemáticas', 6.87),
(7, 8, 'Arte', 8.66),
(4, 8, 'Deportes', 8.68),
(8, 5, 'Química', NULL),
(5, 1, 'Arte', 7.43),
(10, 9, 'Química', 8.12),
(5, 8, 'Arte', 6.66),
(7, 10, 'Inglés', NULL),
(6, 4, 'Historia', 6.77),
(4, 4, 'Arte', NULL),
(9, 6, 'Programación', NULL),
(9, 6, 'Programación', NULL),
(1, 6, 'Arte', NULL),
(9, 4, 'Arte', 8.64),
(4, 8, 'Física', 9.38),
(1, 10, 'Química', 8.18),
(7, 3, 'Deportes', 7.79),
(4, 8, 'Matemáticas', 6.92),
(2, 1, 'Matemáticas', NULL),
(3, 10, 'Física', 7.92),
(9, 4, 'Matemáticas', NULL),
(6, 9, 'Física', 6.58),
(4, 3, 'Matemáticas', 6.05);

--Practica
--1.Escribe un query para obtener el promedio de calificaciones por cada materia en la tabla calificaciones. Incluye solo aquellas materias que tienen al menos una calificación registrada. Ordena del mejor promedio al peor promedio.
SELECT nombre_materia, 
    AVG(calificacion) AS Promedio
FROM calificaciones
WHERE calificacion IS NOT NULL
GROUP BY nombre_materia
ORDER BY Promedio DESC;
--2.Escribe un query que muestre el nombre y apellido de los alumnos que tienen al menos una calificación registrada. Ordena el resultado por apellido.
SELECT DISTINCT n.nombre, n.apellido
FROM alumnos AS n
INNER JOIN calificaciones
USING(expediente)
ORDER BY n.apellido;
--3.Escribe un query que muestre el nombre, apellido y calificación máxima de cada alumno. Considera solo las materias en las que el alumno ha recibido calificación.
SELECT n.nombre, n.apellido, MAX(m.calificacion)
FROM alumnos AS n
LEFT JOIN calificaciones AS m
ON n.expediente = m.expediente
WHERE m.calificacion IS NOT NULL
GROUP BY n.expediente, n.nombre, n.apellido;</sql><current_tab id="0"/></tab_sql></sqlb_project>
